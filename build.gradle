plugins {
	id 'signing'
	id 'fabric-loom' version '1.8.10'
	id 'maven-publish'
	id 'java'
	id "com.github.johnrengelman.processes" version "0.5.0"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	flatDir { dirs "libs" }
	maven { url "https://jitpack.io/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://api.modrinth.com/maven" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://repo.papermc.io/repository/maven-public/" }
}

loom {
	splitEnvironmentSourceSets()
	accessWidenerPath = file("src/main/resources/xdlib.accesswidener")

	mods {
		"xdlib" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	compileOnly("io.papermc.paper:paper-api:1.21.1-R0.1-SNAPSHOT")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
	modImplementation("maven.modrinth:sodium:${project.sodium_version}")
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}"){exclude(group: "net.fabricmc.fabric-api")}
	include(implementation("com.github.MinnDevelopment:java-discord-rpc:2.0.2"))
	implementation("org.json:json:20240303")
	implementation("com.formdev:flatlaf:3.5.1")
	implementation("org.commonmark:commonmark:0.23.0")
	implementation("org.projectlombok:lombok:1.18.34")
	implementation("org.beanshell:bsh:3.0.0-SNAPSHOT")
	implementation("io.hotmoka:toml4j:0.7.3")
}

processResources {
	def props = [version: version]
	inputs.properties props
	filteringCharset 'UTF-8'
	filesMatching('paper-plugin.yml') {
		expand props
	}

	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

task loadEnv {
	doLast {
		file('.env').withReader { reader ->
			reader.eachLine { line ->
				def (key, value) = line.split('=')
				project.ext[key] = value
			}
		}
	}
}

tasks.named('publish').configure {
	dependsOn loadEnv
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/XDPXI/XDLib")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
				password = project.findProperty("gpr.token") ?: System.getenv("TOKEN")
			}
		}
	}
}